package com.tjeannin.provigen.helper;

import android.database.sqlite.SQLiteDatabase;

import com.tjeannin.provigen.annotation.Column;
import com.tjeannin.provigen.model.Constraint;
import com.tjeannin.provigen.model.Contract;
import com.tjeannin.provigen.model.ContractField;
import com.tjeannin.provigen.model.ForeignKeyConstraint;

import java.util.ArrayList;
import java.util.List;

/**
 * Facilitate the creation of an database table from a contract class.
 */
public class TableBuilder {

    private Contract contract;
    private List<Constraint> constraints;

    /**
     * @param contractClass The contract class for which a table will be created.
     */
    public TableBuilder(Class contractClass) {
        contract = new Contract(contractClass);
        constraints = new ArrayList<>();
    }

    /**
     * Adds the specified constraint to the created table.
     *
     * @param columnName               The name of the column on which the constraint is applied.
     * @param constraintType           The type of constraint to apply.
     *                                 One of
     *                                 <ul>
     *                                 <li>{@link com.tjeannin.provigen.model.Constraint#UNIQUE}</li>
     *                                 <li>{@link com.tjeannin.provigen.model.Constraint#NOT_NULL}</li>
     *                                 </ul>
     * @param constraintConflictClause The conflict clause to apply in case of constraint violation.
     *                                 One of
     *                                 <ul>
     *                                 <li>{@link com.tjeannin.provigen.model.Constraint.OnConflict#ABORT}</li>
     *                                 <li>{@link com.tjeannin.provigen.model.Constraint.OnConflict#FAIL}</li>
     *                                 <li>{@link com.tjeannin.provigen.model.Constraint.OnConflict#IGNORE}</li>
     *                                 <li>{@link com.tjeannin.provigen.model.Constraint.OnConflict#REPLACE}</li>
     *                                 <li>{@link com.tjeannin.provigen.model.Constraint.OnConflict#ROLLBACK}</li>
     *                                 </ul>
     * @return The {@link com.tjeannin.provigen.helper.TableBuilder} instance to allow chaining.
     */
    public TableBuilder addConstraint(String columnName, String constraintType, String constraintConflictClause) {
        constraints.add(new Constraint(columnName, constraintType, constraintConflictClause));
        return this;
    }

    /**
     * @return The SQL expression generated by this {@link com.tjeannin.provigen.helper.TableBuilder}.
     */
    public String getSQL() {

        StringBuilder builder = new StringBuilder("CREATE TABLE IF NOT EXISTS ");
        builder.append(contract.getTable()).append(" ( ");

        for (ContractField field : contract.getFields()) {
            builder.append(" ").append(field.name).append(" ").append(field.type);

            boolean isSinglePrimaryKey = false;
            // single PRIMARY KEY
            if(contract.getIdFields().size() == 1) {
                if (field.name.equals(contract.getIdFields().get(0))) {
                    isSinglePrimaryKey = true;
                    builder.append(" NOT NULL PRIMARY KEY ");

                    if (field.type.equals(Column.Type.INTEGER)) {
                        if(contract.isAutoincrement(field.name)) {
                            builder.append(" AUTOINCREMENT "); // 123 456 789
                        }
                    }
                }
            }

            if(!isSinglePrimaryKey) {
                for (Constraint constraint : constraints) {
                    if (constraint.targetColumn.equals(field.name)) {
                        builder.append(" ").append(constraint.type).append(" ON CONFLICT ").append(constraint.conflictClause);
                    }
                }
            }

            builder.append(", ");
        }

        // foreign keys
        for(ForeignKeyConstraint foreignKey : contract.getForeignKeys()) {
            builder.append("FOREIGN KEY (").append(foreignKey.getColumn()).append(") references ")
                    .append(foreignKey.getTableReferenced()).append("(").append(foreignKey.getColumnReferenced()).append("), ");
        }

        // composite primary key
        if(contract.getIdFields().size() > 1) {
            builder.append("PRIMARY KEY (");
            // пробегаем по полям, помеченными как @Id
            for(int i = 0; i < contract.getIdFields().size(); i++) {
                builder.append(contract.getIdFields().get(i));
                if(i < contract.getIdFields().size() - 1) {
                    builder.append(", ");
                }
            }
            builder.append(")");
        }
        else {
            // delete ',' in the end
            builder.deleteCharAt(builder.length() - 2);
        }
        builder.append(")");

        return builder.toString();
    }

    /**
     * Creates the table in the database.
     *
     * @param database The database in which the table need to be created.
     */
    public void createTable(SQLiteDatabase database) {
        database.execSQL(getSQL());
    }
}